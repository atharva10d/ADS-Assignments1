Assignment 2
Implement a multiplayer game system that uses an AVL tree data structure to organize and manage player data efficiently. The multiplayer game supports multiple players participating simultaneously, and the AVL tree is used to store player information such as player_id and scores (key, value pair). The system should provide following operation:
1. Player Registration
2. Leaderboard Display
3. Remove player from game
CODE:
#include <iostream>
using namespace std;

class AVLNode {
public:
    int player_id;
    int score;
    AVLNode *left;
    AVLNode *right;
    int height;

    AVLNode(int player_id, int score)
    {
        this->player_id = player_id;
        this->score = score;
        left = right = nullptr;
        height = 1;
    }
};

class AVLTree {
public:
    AVLNode *root;

    AVLTree()
    {
        root = nullptr;
    }

    int height(AVLNode *node)
    {
        return node ? node->height : 0;
    }

    int balanceFactor(AVLNode *node)
    {
        return node ? height(node->left) - height(node->right) : 0;
    }

    AVLNode *rotateRight(AVLNode *y)
    {
        AVLNode *x = y->left;
        AVLNode *T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;

        return x;
    }

    AVLNode *rotateLeft(AVLNode *x)
    {
        AVLNode *y = x->right;
        AVLNode *T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;

        return y;
    }

    AVLNode *insert(AVLNode *node, int player_id, int score)
    {
        if (!node)
        {
            return new AVLNode(player_id, score);
        }

        if (player_id < node->player_id)
        {
            node->left = insert(node->left, player_id, score);
        }
        else if (player_id > node->player_id)
        {
            node->right = insert(node->right, player_id, score);
        }
        else
        {
            cout << "Player ID already exists!\n";
            return node;
        }

        node->height = max(height(node->left), height(node->right)) + 1;

        int balance = balanceFactor(node);

        if (balance > 1 && player_id < node->left->player_id)
        {
            return rotateRight(node);
        }

        if (balance < -1 && player_id > node->right->player_id)
        {
            return rotateLeft(node);
        }

        if (balance > 1 && player_id > node->left->player_id)
        {
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }

        if (balance < -1 && player_id < node->right->player_id)
        {
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }

        return node;
    }

    AVLNode *minValueNode(AVLNode *node)
    {
        AVLNode *current = node;
        while (current->left)
        {
            current = current->left;
        }
        return current;
    }

    AVLNode *remove(AVLNode *root, int player_id)
    {
        if (!root)
        {
            return root;
        }

        if (player_id < root->player_id)
        {
            root->left = remove(root->left, player_id);
        }
        else if (player_id > root->player_id)
        {
            root->right = remove(root->right, player_id);
        }
        else
        {
            if (!root->left || !root->right)
            {
                AVLNode *temp = root->left ? root->left : root->right;
                delete root;
                return temp;
            }

            AVLNode *temp = minValueNode(root->right);
            root->player_id = temp->player_id;
            root->score = temp->score;
            root->right = remove(root->right, temp->player_id);
        }

        if (!root)
        {
            return root;
        }

        root->height = max(height(root->left), height(root->right)) + 1;

        int balance = balanceFactor(root);

        if (balance > 1 && balanceFactor(root->left) >= 0)
        {
            return rotateRight(root);
        }

        if (balance > 1 && balanceFactor(root->left) < 0)
        {
            root->left = rotateLeft(root->left);
            return rotateRight(root);
        }

        if (balance < -1 && balanceFactor(root->right) <= 0)
        {
            return rotateLeft(root);
        }

        if (balance < -1 && balanceFactor(root->right) > 0)
        {
            root->right = rotateRight(root->right);
            return rotateLeft(root);
        }

        return root;
    }

    void inOrder(AVLNode *root)
    {
        if (!root)
        {
            return;
        }
        inOrder(root->right);
        cout << "Player ID: " << root->player_id << ", Score: " << root->score << endl;
        inOrder(root->left);
    }
};

int main()
{
    AVLTree game;
    int choice, player_id, score;

    do
    {
        cout << "\n1. Player Registration\n2. Leaderboard Display\n3. Remove Player from Game\n4. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice)
        {
            case 1:
            {
                cout << "Enter Player ID and Score: ";
                cin >> player_id >> score;
                game.root = game.insert(game.root, player_id, score);
                break;
            }
            case 2:
            {
                cout << "Leaderboard:\n";
                game.inOrder(game.root);
                break;
            }
            case 3:
            {
                cout << "Enter Player ID to remove: ";
                cin >> player_id;
                game.root = game.remove(game.root, player_id);
                break;
            }
            case 4:
            {
                cout << "Exiting...\n";
                break;
            }
            default:
            {
                cout << "Invalid choice!\n";
            }
        }
    }
    while (choice != 4);

    return 0;
}

